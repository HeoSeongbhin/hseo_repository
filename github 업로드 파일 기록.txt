1주차: 크롤링(네이버 한국 날씨,세계 날씨)
	
	라이브러리 가져오기:
	URL 인코딩==urllib.parse
	HTML 내용 파싱== bs4 라이브러리의 	BeautifulSoup.
	
	사용자 입력:
	사용자가 입력한 날씨와 관련된 위치가 
	텍스트 변수에 저장.
	
	URL 인코딩 및 빌드:
	1.urllib.parse의 quote 함수는 UTF-8 	인코딩에서 사용자 입력을 인코딩, 결과는 	변경 변수에 저장.
	2.인코딩된 사용자 입력을 URL 뒤에 추가	하여 전체 검색 URL을 만듦
	
	HTTP 요청 및 HTML 구문 분석:
	1.urlopen을 사용하여 작성된 URL로 검색 	결과 페이지의 HTML 내용을 검색.	2.HTML 변수에 저장.

	BeautifulSoup을 사용한 HTML 구문 분석:
	1.BeautifulSoup 라이브러리는 HTML 컨	텐츠를 파싱하는데 사용. 
	2.파싱된 컨텐츠는 Soup 변수에 저장.
	3.페이지에서 특정 요소를 탐색, 추출
	
	정보 추출 기능:
	1.스크립트는 global_weather와 	korean_weather의 두 가지 기능을 정의	하여 제공자별 날씨 정보를 추출.
	2.구문 분석된 HTML 컨텐츠 내에서 특정 	HTML요소를 찾아 위치, 날씨 상태, 온도, 	공기질등의 관련 정보를 추출.

	공급자 식별 및 기능 실행:
	1.코드는 특정 HTML 요소 내에서 텍스트를 	찾아 분할하여 리스트에 나타난 날씨 제공	자를 식별, 결과는 test2 변수에 저장.
	2.식별된 제공자에 따라 날씨 정보를 추출	하여 표시하기 위해 두 가지 날씨 
	기능 중 한 가지를 호출
	(lobal weather,korean weather)

2주차: 데이터 전처리 및 시각화(한국어)
	
	텍스트 정규화:
	중복된 글자나 불필요한 글자들을 		정규화 해줌.
	
	토큰화:
	정규화한 텍스트를 토큰화 하면서 		단어 리스트를 만듦.
	
	불용어 목록:
	추출할 명사들을 남겨놓기 위해
	명사를 제외한 품사들을 리스트에 
	저장.
	
	불용어 제거된 토큰 사용:
	불용어를 제거하면서 필요한 명사		들만 리스트에 남김.
	
	워드 클라우드:
	1.단어들이 특정 형태를 갖추도록		만들기 위해 외부에서 가져온 이미		지를 입력.
	2.폰트,배경색,글자색,글자 크기 		등의 정보를 입력하면서 워드 클라		우드를 만듦.
	3.워드 클라우드를 표시하기 위한 		정보들을 입력하고 워드 클라우드 		그림을 출력함.
		
		

	